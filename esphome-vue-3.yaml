substitutions:
  name: "emporia-vue3"
  friendly_name: "Emporia Vue 3"
  # Enable for multiple units
  name_add_mac_suffix: "false"
  # Flash write interval should be set to 24-48 hours to prolong lifespan
  flash_write_interval: "48h"
  # Average all raw readings together over a X second span
  average_time: 5s
  # Send the sensor values every X seconds
  send_update_interval: 60s
  # Choose time source (sntp or homeassistant) - (homeassistant recommended)
  time_source: homeassistant
  # Set timezone of the device. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: ""
  # Enable or disable the use of IPv6 networking on the device
  ipv6_enable: "false"
  # API disconnect reboot timeout - set this to 0s if you don't want API disconnect to trigger reboot
  reboot_timeout: "15min"
  # Main power calibration - default is 0.022
  # To calculate new calibration value use the formula <current calibration value> * <accurate voltage> / <reporting voltage> 
  # Example the current calibration is 0.022 and reporting 123 volts, but volt meter reads 119 - 0.022 * 119 / 123 = 0.0212
  phase_a_calibration: "0.022"
  phase_b_calibration: "0.022"
  # Circuit Labels used for publishing to Home Assistant
  circuit_1:  "Circuit 1"
  circuit_2:  "Circuit 2"
  circuit_3:  "Circuit 3"
  circuit_4:  "Circuit 4"
  circuit_5:  "Circuit 5"
  circuit_6:  "Circuit 6"
  circuit_7:  "Circuit 7"
  circuit_8:  "Circuit 8"
  circuit_9:  "Circuit 9"
  circuit_10: "Circuit 10"
  circuit_11: "Circuit 11"
  circuit_12: "Circuit 12"
  circuit_13: "Circuit 13"
  circuit_14: "Circuit 14"
  circuit_15: "Circuit 15"
  circuit_16: "Circuit 16"
  # CT clamp phase setting (should be phase_a or phase_b)
  ct1_phase: phase_a
  ct2_phase: phase_a
  ct3_phase: phase_a
  ct4_phase: phase_a
  ct5_phase: phase_a
  ct6_phase: phase_a
  ct7_phase: phase_a
  ct8_phase: phase_a
  ct9_phase: phase_a
  ct10_phase: phase_a
  ct11_phase: phase_a
  ct12_phase: phase_a
  ct13_phase: phase_a
  ct14_phase: phase_a
  ct15_phase: phase_a
  ct16_phase: phase_a
  # CT clamp power mulitplier (Change to 2 for 240v with 1 CT clamp)
  ct1_multiply: "1"
  ct2_multiply: "1"
  ct3_multiply: "1"
  ct4_multiply: "1"
  ct5_multiply: "1"
  ct6_multiply: "1"
  ct7_multiply: "1"
  ct8_multiply: "1"
  ct9_multiply: "1"
  ct10_multiply: "1"
  ct11_multiply: "1"
  ct12_multiply: "1"
  ct13_multiply: "1"
  ct14_multiply: "1"
  ct15_multiply: "1"
  ct16_multiply: "1"
  # Icons for Home Assistant
  icon_circuit: "mdi:power-plug"
  icon_current: "mdi:current-ac"
  icon_meter:   "mdi:meter-electric"
  icon_phase:   "mdi:angle-acute"
  icon_power:   "mdi:transmission-tower-import"
  icon_voltage: "mdi:transmission-tower"
##########End of substitutions###################################################################################################################################################

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: "${name_add_mac_suffix}"
  comment: "Emporia Vue 3 - 16 channel energy monitor"
  project:
    name: "Emporia.Vue 3"
    version: "2025.2.1"

external_components:
  - source: github://emporia-vue-local/esphome@vue3
    components:
      - emporia_vue

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

# Enable Home Assistant API
api:
  reboot_timeout: "${reboot_timeout}"
  encryption:
    key: !secret api_encryption

ota:
  - platform: esphome
    password: !secret ota_password

# Enable logging
logger:
  logs:
    # by default, every reading will be printed to the UART, which is very slow
    # This will disable printing the readings but keep other helpful messages
    sensor: INFO

web_server:
  include_internal: True
  log: True
  port: 80
  version: 3

wifi:
  # Wifi credentials are stored securely by new device wizard.
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
    - light.turn_on: wifi_led
  on_disconnect:
    - light.turn_off: wifi_led

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Emporia Vue Fallback Hotspot"

#ethernet:
#  type: RTL8201
#  mdc_pin: GPIO32
#  mdio_pin: GPIO33
#  clk_mode: GPIO0_IN
#  on_connect:
#    - light.turn_on: ethernet_led
#  on_disconnect:
#    - light.turn_off: ethernet_led

network:
  enable_ipv6: ${ipv6_enable}

preferences:
  # please also make sure `restore: false` is set on all `platform: total_daily_energy`
  # sensors below.
  flash_write_interval: "${flash_write_interval}"

# The restart button platform allows you to restart your node remotely through Home Assistant.
button:
  - platform: restart
    name: Restart
    id: restart_button
    icon: mdi:restart

  - platform: safe_mode
    name: Restart (Safe Mode)
    id: safe_mode_button
    icon: mdi:restart-alert

# Configure the two status LEDs on the Emporia Vue v3 case
# https://github.com/emporia-vue-local/esphome/discussions/264#discussioncomment-9788390
light:
  - platform: status_led
    id: wifi_led
    pin:
      number: 2
      ignore_strapping_warning: true
    restore_mode: ALWAYS_OFF
  - platform: status_led
    id: ethernet_led
    pin: 4
    restore_mode: ALWAYS_OFF

i2c:
  sda: 5
  scl: 18
  scan: false
  frequency: 400kHz  # recommended range is 50-200kHz
  timeout: 1ms
  id: i2c_a

time:
  - platform: "${time_source}"
    id: time_sync
    timezone: "${timezone}"

# these are called references in YAML. They allow you to reuse
# this configuration in each sensor, while only defining it once
.defaultfilters:
  - &throttle_avg
    # average all raw readings together over a X second span before publishing
    throttle_average: "${average_time}"
  - &throttle_time
    # only send the most recent measurement every X seconds
    throttle: "${send_update_interval}"
  - &invert
    # invert and filter out any values below 0.
    lambda: 'return max(-x, 0.0f);'
  - &pos
    # filter out any values below 0.
    lambda: 'return max(x, 0.0f);'
  - &abs
    # take the absolute value of the value
    lambda: 'return abs(x);'

sensor:
  - platform: emporia_vue
    i2c_id: i2c_a
    phases:
      - id: phase_a  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: BLACK  # Vue device wire color
        calibration: "${phase_a_calibration}"  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "Phase A Voltage"
          filters: [*throttle_avg, *pos]
        frequency:
          name: "Phase A Frequency"
          filters: [*throttle_avg, *pos]
      - id: phase_b  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: RED  # Vue device wire color
        calibration: "${phase_b_calibration}"  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "Phase B Voltage"
          filters: [*throttle_avg, *pos]
        phase_angle:
          name: "Phase B Phase Angle"
          filters: [*throttle_avg, *pos]
    ct_clamps:
      # Do not specify a name for any of the power sensors here, only an id. This leaves the power sensors internal to ESPHome.
      # Copy sensors will filter and then send power measurements to HA
      # These non-throttled power sensors are used for accurately calculating energy
      - phase_id: phase_a
        input: "A"  # Verify the CT going to this device input also matches the phase/leg
        power:
          id: phase_a_power
          filters: [*pos]
      - phase_id: phase_b
        input: "B"  # Verify the CT going to this device input also matches the phase/leg
        power:
          id: phase_b_power
          filters: [*pos]
      # Pay close attention to set the phase_id for each breaker by matching it to the phase/leg it connects to in the panel
      - { input:  "1", phase_id: "${ct1_phase}", power: { id:  cir1, filters: [ *pos, multiply: "${ct1_multiply}" ] } }
      - { input:  "2", phase_id: "${ct2_phase}", power: { id:  cir2, filters: [ *pos, multiply: "${ct2_multiply}" ] } }
      - { input:  "3", phase_id: "${ct3_phase}", power: { id:  cir3, filters: [ *pos, multiply: "${ct3_multiply}" ] } }
      - { input:  "4", phase_id: "${ct4_phase}", power: { id:  cir4, filters: [ *pos, multiply: "${ct4_multiply}" ] } }
      - { input:  "5", phase_id: "${ct5_phase}", power: { id:  cir5, filters: [ *pos, multiply: "${ct5_multiply}" ] } }
      - { input:  "6", phase_id: "${ct6_phase}", power: { id:  cir6, filters: [ *pos, multiply: "${ct6_multiply}" ] } }
      - { input:  "7", phase_id: "${ct7_phase}", power: { id:  cir7, filters: [ *pos, multiply: "${ct7_multiply}" ] } }
      - { input:  "8", phase_id: "${ct8_phase}", power: { id:  cir8, filters: [ *pos, multiply: "${ct8_multiply}" ] } }
      - { input:  "9", phase_id: "${ct9_phase}", power: { id:  cir9, filters: [ *pos, multiply: "${ct9_multiply}" ] } }
      - { input: "10", phase_id: "${ct10_phase}", power: { id: cir10, filters: [ *pos, multiply: "${ct10_multiply}" ] } }
      - { input: "11", phase_id: "${ct11_phase}", power: { id: cir11, filters: [ *pos, multiply: "${ct11_multiply}" ] } }
      - { input: "12", phase_id: "${ct12_phase}", power: { id: cir12, filters: [ *pos, multiply: "${ct12_multiply}" ] } }
      - { input: "13", phase_id: "${ct13_phase}", power: { id: cir13, filters: [ *pos, multiply: "${ct13_multiply}" ] } }
      - { input: "14", phase_id: "${ct14_phase}", power: { id: cir14, filters: [ *pos, multiply: "${ct14_multiply}" ] } }
      - { input: "15", phase_id: "${ct15_phase}", power: { id: cir15, filters: [ *pos, multiply: "${ct15_multiply}" ] } }
      - { input: "16", phase_id: "${ct16_phase}", power: { id: cir16, filters: [ *pos, multiply: "${ct16_multiply}" ] } }
    on_update:
      then:
        - component.update: total_power
        - component.update: balance_power
  # The copy sensors filter and send the power state to HA
  - { platform: copy, name: "Phase A Power", source_id: phase_a_power, filters: *throttle_avg }
  - { platform: copy, name: "Phase B Power", source_id: phase_b_power, filters: *throttle_avg }
  - { platform: copy, name: "Total Power", source_id: total_power, filters: *throttle_avg }
  - { platform: copy, name: "Balance Power", source_id: balance_power, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 1 Power", source_id:  cir1, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 2 Power", source_id:  cir2, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 3 Power", source_id:  cir3, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 4 Power", source_id:  cir4, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 5 Power", source_id:  cir5, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 6 Power", source_id:  cir6, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 7 Power", source_id:  cir7, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 8 Power", source_id:  cir8, filters: *throttle_avg }
  - { platform: copy, name:  "Circuit 9 Power", source_id:  cir9, filters: *throttle_avg }
  - { platform: copy, name: "Circuit 10 Power", source_id: cir10, filters: *throttle_avg }
  - { platform: copy, name: "Circuit 11 Power", source_id: cir11, filters: *throttle_avg }
  - { platform: copy, name: "Circuit 12 Power", source_id: cir12, filters: *throttle_avg }
  - { platform: copy, name: "Circuit 13 Power", source_id: cir13, filters: *throttle_avg }
  - { platform: copy, name: "Circuit 14 Power", source_id: cir14, filters: *throttle_avg }
  - { platform: copy, name: "Circuit 15 Power", source_id: cir15, filters: *throttle_avg }
  - { platform: copy, name: "Circuit 16 Power", source_id: cir16, filters: *throttle_avg }

  # The total power sensor will be updated after all power sensors update via on_update trigger.
  - platform: template
    lambda: return id(phase_a_power).state + id(phase_b_power).state;
    update_interval: never   # will be updated after all power sensors update via on_update trigger
    id: total_power
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"

  # The balance power sensor will be updated after all power sensors update via on_update trigger.
  - platform: template
    update_interval: never   # will be updated after all power sensors update via on_update trigger
    id: balance_power
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"
    lambda: !lambda |-
      return max(0.0f, id(total_power).state -
        id( cir1).state -
        id( cir2).state -
        id( cir3).state -
        id( cir4).state -
        id( cir5).state -
        id( cir6).state -
        id( cir7).state -
        id( cir8).state -
        id( cir9).state -
        id(cir10).state -
        id(cir11).state -
        id(cir12).state -
        id(cir13).state -
        id(cir14).state -
        id(cir15).state -
        id(cir16).state);

  # The total daily energy sensors to be published to Home Assistant
  - { platform: total_daily_energy, name: "Total Daily Energy", power_id: total_power,     filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "Balance Daily Energy", power_id: balance_power, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_1} Daily Energy",  power_id: cir1,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_2} Daily Energy",  power_id: cir2,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_3} Daily Energy",  power_id: cir3,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_4} Daily Energy",  power_id: cir4,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_5} Daily Energy",  power_id: cir5,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_6} Daily Energy",  power_id: cir6,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_7} Daily Energy",  power_id: cir7,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_8} Daily Energy",  power_id: cir8,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_9} Daily Energy",  power_id: cir9,  filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_10} Daily Energy", power_id: cir10, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_11} Daily Energy", power_id: cir11, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_12} Daily Energy", power_id: cir12, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_13} Daily Energy", power_id: cir13, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_14} Daily Energy", power_id: cir14, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_15} Daily Energy", power_id: cir15, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
  - { platform: total_daily_energy, name: "${circuit_16} Daily Energy", power_id: cir16, filters: *throttle_time, accuracy_decimals: 0, restore: false, icon: $icon_meter }
